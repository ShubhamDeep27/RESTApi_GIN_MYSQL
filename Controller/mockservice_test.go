// Code generated by MockGen. DO NOT EDIT.
// Source: rest/gin/service (interfaces: EmployeeService)

// Package mock_service is a generated GoMock package.
package Controller

import (
	reflect "reflect"
	models "rest/gin/models"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// CreateEmployees mocks base method.
func (m *MockEmployeeService) CreateEmployees(arg0 *models.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployees", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployees indicates an expected call of CreateEmployees.
func (mr *MockEmployeeServiceMockRecorder) CreateEmployees(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployees", reflect.TypeOf((*MockEmployeeService)(nil).CreateEmployees), arg0)
}

// GetAllEmployees mocks base method.
func (m *MockEmployeeService) GetAllEmployees() ([]*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees")
	ret0, _ := ret[0].([]*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockEmployeeServiceMockRecorder) GetAllEmployees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockEmployeeService)(nil).GetAllEmployees))
}

// GetEmployeeById mocks base method.
func (m *MockEmployeeService) GetEmployeeById(arg0 string) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeById", arg0)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeById indicates an expected call of GetEmployeeById.
func (mr *MockEmployeeServiceMockRecorder) GetEmployeeById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeById", reflect.TypeOf((*MockEmployeeService)(nil).GetEmployeeById), arg0)
}

// UpdateEmployee mocks base method.
func (m *MockEmployeeService) UpdateEmployee(arg0 *models.Employee, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockEmployeeServiceMockRecorder) UpdateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeService)(nil).UpdateEmployee), arg0, arg1)
}
